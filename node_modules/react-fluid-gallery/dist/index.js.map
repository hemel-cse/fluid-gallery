{"version":3,"sources":["../src/index.js"],"names":["noop","undefined","ReactFluidGallery","props","startAt","Math","random","slides","length","ref","_container","_canvas","event","preventDefault","_gallery","onScroll","deltaX","deltaY","isFlick","width","clientWidth","height","clientHeight","resize","onChange","update","render","_current","currentSlideIndex","_tickRaf","_tick","_onResize","window","addEventListener","_reset","removeEventListener","raf","cancel","style","rest","overflow","_onSwiped","_containerRef","_canvasRef","_onWheel","FluidGallery","canvas","current","Component","PropTypes","arrayOf","string","isRequired","number","func","object","size","shape","monitorWidth","monitorHeight"],"mappings":"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","sourcesContent":["// TODO: better support for tracking touch position during swiping\n\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport raf from 'raf'\nimport sizeMe from 'react-sizeme'\nimport Swipeable from 'react-swipeable'\n\nimport FluidGallery from './fluid-gallery'\n\nconst noop = () => undefined\n\nclass ReactFluidGallery extends Component {\n  static propTypes = {\n    slides: PropTypes.arrayOf(PropTypes.string).isRequired,\n    startAt: PropTypes.number,\n    onChange: PropTypes.func,\n    style: PropTypes.object,\n    size: PropTypes.shape({\n      width: PropTypes.number,\n      height: PropTypes.number\n    })\n  }\n\n  static defaultProps = {\n    onChange: noop,\n    style: { }\n  }\n\n  _current = (typeof this.props.startAt !== 'undefined'\n    ? this.props.startAt\n    : (Math.random() * this.props.slides.length | 0)\n  )\n\n  componentWillReceiveProps(props) {\n    this._onResize()\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this._onResize)\n    this._reset(this.props)\n    this._tick()\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this._onResize)\n    if (this._tickRaf) {\n      raf.cancel(this._tickRaf)\n      this._tickRaf = null\n    }\n  }\n\n  render() {\n    const {\n      slides,\n      startAt,\n      onChange,\n      style,\n      ...rest\n    } = this.props\n\n    return (\n      <Swipeable\n        style={{\n          width: '100%',\n          height: '100%',\n          overflow: 'hidden',\n          ...style\n        }}\n        {...rest}\n        stopPropagation={true}\n        preventDefaultTouchmoveEvent={true}\n        onSwiped={this._onSwiped}\n        innerRef={this._containerRef}\n      >\n        <canvas\n          ref={this._canvasRef}\n          onWheel={this._onWheel}\n          style={{\n            width: '100%',\n            height: '100%'\n          }}\n        />\n      </Swipeable>\n    )\n  }\n\n  _containerRef = (ref) => {\n    this._container = ref\n  }\n\n  _canvasRef = (ref) => {\n    this._canvas = ref\n  }\n\n  _onWheel = (event) => {\n    event.preventDefault()\n    this._gallery.onScroll(event)\n  }\n\n  _onSwiped = (event, deltaX, deltaY, isFlick) => {\n    if (isFlick) {\n      deltaY *= 5\n    }\n\n    this._gallery.onScroll({\n      ...event,\n      deltaY\n    })\n  }\n\n  _onResize = () => {\n    this._canvas.width = this._container.clientWidth\n    this._canvas.height = this._container.clientHeight\n\n    if (this._gallery) {\n      this._gallery.resize()\n    }\n  }\n\n  _tick = () => {\n    const {\n      onChange\n    } = this.props\n\n    this._gallery.update()\n    this._gallery.render()\n\n    if (this._current !== this._gallery.currentSlideIndex) {\n      this._current = this._gallery.currentSlideIndex\n      onChange(this._current)\n    }\n\n    this._tickRaf = raf(this._tick)\n  }\n\n  _reset(props) {\n    const {\n      slides\n    } = props\n\n    this._onResize()\n\n    this._gallery = new FluidGallery({\n      canvas: this._canvas,\n      slides,\n      current: this._current\n    })\n  }\n}\n\nexport default sizeMe({ monitorWidth: true, monitorHeight: true })(ReactFluidGallery)\n"],"file":"index.js"}