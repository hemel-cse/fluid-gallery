{"version":3,"sources":["../src/fluid-gallery.js"],"names":["FluidGallery","opts","src","video","document","createElement","muted","loop","autoplay","texture","THREE","VideoTexture","minFilter","LinearFilter","maxFilter","addEventListener","_updateTextureOnResize","load","play","catch","undefined","_textureLoader","event","_speed","deltaY","canvas","slides","current","width","height","window","ImageBitmap","_canvas","TextureLoader","_textures","map","_initTexture","_time","_position","_renderer","WebGLRenderer","_camera","PerspectiveCamera","position","set","_material","ShaderMaterial","side","DoubleSide","vertexShader","fragmentShader","uniforms","time","type","value","pixels","Vector2","accel","progress","uvRate1","texture1","currentSlideIndex","texture2","nextSlideIndex","_plane","Mesh","PlaneGeometry","_scene","Scene","background","Color","add","resize","setSize","aspect","y","dist","z","fov","Math","PI","atan","scale","x","updateProjectionMatrix","forEach","n","length","posI","round","diff","abs","currentSlide","nextSlide","render","floor"],"mappings":"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","sourcesContent":["// TODO: allow overriding constants\n// TODO: support cleanup?\n\nimport * as THREE from 'three'\nimport isVideo from 'is-video'\n\nimport fragmentShader from './frag'\nimport vertexShader from './vert'\n\nexport default class FluidGallery {\n  constructor(opts) {\n    const {\n      canvas,\n      slides,\n      current = 0\n    } = opts\n\n    const {\n      width,\n      height\n    } = canvas\n\n    // TODO: why is this necessary on safari with three.js?\n    if (window.ImageBitmap === undefined) {\n      window.ImageBitmap = function () { }\n    }\n\n    this._canvas = canvas\n    this._textureLoader = new THREE.TextureLoader()\n    this._textures = slides.map(this._initTexture)\n\n    this._time = 0\n    this._speed = 0\n    this._position = current\n\n    this._renderer = new THREE.WebGLRenderer({ canvas })\n\n    this._camera = new THREE.PerspectiveCamera(70, width / height, 0.001, 100)\n    this._camera.position.set(0, 0, 1)\n\n    this._material = new THREE.ShaderMaterial({\n      side: THREE.DoubleSide,\n      vertexShader,\n      fragmentShader,\n      uniforms: {\n        time: { type: 'f', value: this._time },\n        pixels: { type: 'v2', value: new THREE.Vector2(width, height) },\n        accel: { type: 'v2', value: new THREE.Vector2(0.5, 2) },\n        progress: { type: 'f', value: 0 },\n        uvRate1: {\n          value: new THREE.Vector2(1, 1)\n        },\n        texture1: {\n          value: this._textures[this.currentSlideIndex]\n        },\n        texture2: {\n          value: this._textures[this.nextSlideIndex]\n        }\n      }\n    })\n\n    this._plane = new THREE.Mesh(new THREE.PlaneGeometry(1, 1, 1, 1), this._material)\n\n    this._scene = new THREE.Scene()\n    this._scene.background = new THREE.Color(0x111111)\n    this._scene.add(this._plane)\n\n    this.resize()\n  }\n\n  resize() {\n    const {\n      width,\n      height\n    } = this._canvas\n\n    this._renderer.setSize(width, height)\n    this._camera.aspect = width / height\n\n    this._material.uniforms.uvRate1.value.y = height / width\n\n    const dist = this._camera.position.z - this._plane.position.z\n    this._camera.fov = 2 * (180 / Math.PI) * Math.atan(1.0 / (2 * dist))\n\n    this._plane.scale.x = width / height\n\n    this._camera.updateProjectionMatrix()\n\n    this._textures.forEach(this._updateTextureOnResize)\n  }\n\n  _initTexture = (src) => {\n    if (isVideo(src)) {\n      const video = document.createElement('video')\n      video.muted = true\n      video.loop = true\n      video.autoplay = true\n\n      const texture = new THREE.VideoTexture(video)\n      texture.minFilter = THREE.LinearFilter\n      texture.maxFilter = THREE.LinearFilter\n      video.addEventListener('load', () => this._updateTextureOnResize(texture))\n      video.addEventListener('loadedmetadata', () => this._updateTextureOnResize(texture))\n\n      video.src = src\n      video.load()\n      const play = video.play()\n      if (play) {\n        play.catch(() => undefined)\n      }\n\n      return texture\n    } else {\n      const texture = this._textureLoader.load(src, this._updateTextureOnResize)\n      return texture\n    }\n  }\n\n  _updateTextureOnResize = (texture) => {\n    // TODO: changing texture wrapS/wrapT and UV matrix only works with textures\n    // that are sizeed power of two\n\n    /*\n    let texWidth\n    let texHeight\n\n    if (texture.image) {\n      texWidth = texture.image.naturalWidth || texture.image.videoWidth\n      texHeight = texture.image.naturalHeight || texture.image.videoHeight\n    }\n\n    // console.log('_updateTextureOnResize', texture, { texWidth, texHeight })\n\n    if (texWidth > 0 && texHeight > 0) {\n      const {\n        width,\n        height\n      } = this._canvas\n\n      texture.wrapS = THREE.ClampToEdgeWrapping\n      texture.wrapT = THREE.ClampToEdgeWrapping\n\n      // const t = rectCover(this._canvas, { width: texWidth, height: texHeight })\n      // console.log(t)\n\n      // texture.offset.set(t[0] / width, t[1] / height)\n      // texture.repeat.set(4, 4)\n\n      // const repeatX = width * texHeight / (height * texWidth)\n      // const repeatY = 1\n      // texture.repeat.set(repeatX, repeatY)\n      // texture.offset.x = (repeatX - 1) / 2 * -1\n\n      texture.needsUpdate = true\n      console.log(texture)\n    }\n    */\n  }\n\n  get currentSlideIndex() {\n    const n = this._textures.length\n    return (Math.floor(this._position) + n) % n\n  }\n\n  get nextSlideIndex() {\n    const n = this._textures.length\n    return (this.currentSlideIndex + 1) % n\n  }\n\n  onScroll = (event) => {\n    this._speed += event.deltaY * 0.0002\n  }\n\n  update() {\n    this._time += 0.05\n    this._material.uniforms.time.value = this._time\n\n    this._position += this._speed\n    this._speed *= 0.7\n\n    const n = this._textures.length\n    const posI = Math.round(this._position)\n    const diff = posI - this._position\n\n    this._position += diff * 0.035\n\n    if (Math.abs(posI - this._position) < 0.001) {\n      this._position = posI\n    }\n\n    if (this._position < 0) {\n      this._position += n\n    }\n\n    this._material.uniforms.progress.value = this._position\n\n    const currentSlide = this.currentSlideIndex\n    const nextSlide = this.nextSlideIndex\n\n    this._material.uniforms.texture1.value = this._textures[currentSlide]\n    this._material.uniforms.texture2.value = this._textures[nextSlide]\n\n    // console.log({ currentSlide, nextSlide, position: this._position })\n  }\n\n  render() {\n    this._renderer.render(this._scene, this._camera)\n  }\n}\n"],"file":"fluid-gallery.js"}